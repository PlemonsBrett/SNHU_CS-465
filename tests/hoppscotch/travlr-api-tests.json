{
    "v": "2.0",
    "name": "SNHU CS-465 Travlr API Tests",
    "description": "Comprehensive test suite for Module 5 RESTful API endpoints",
    "folders": [
      {
        "name": "Smoke Tests",
        "description": "Basic functionality validation",
        "requests": [
          {
            "name": "Get All Trips - Success",
            "method": "GET",
            "url": "{{BASE_URL}}/api/trips",
            "headers": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "tests": [
              {
                "descriptor": "Status code is 200",
                "script": "pm.test('Status code is 200', () => { pm.response.to.have.status(200); });"
              },
              {
                "descriptor": "Response is JSON",
                "script": "pm.test('Response is JSON', () => { pm.response.to.be.json; });"
              },
              {
                "descriptor": "Response contains trips array",
                "script": "pm.test('Response contains trips array', () => { const json = pm.response.json(); pm.expect(json).to.be.an('array'); pm.expect(json.length).to.be.at.least(1); });"
              },
              {
                "descriptor": "Each trip has required properties",
                "script": "pm.test('Each trip has required properties', () => { const trips = pm.response.json(); trips.forEach(trip => { pm.expect(trip).to.have.property('code'); pm.expect(trip).to.have.property('name'); pm.expect(trip).to.have.property('length'); pm.expect(trip).to.have.property('start'); pm.expect(trip).to.have.property('resort'); pm.expect(trip).to.have.property('perPerson'); pm.expect(trip).to.have.property('image'); pm.expect(trip).to.have.property('description'); }); });"
              }
            ]
          },
          {
            "name": "Get Trip by Code - GALR",
            "method": "GET",
            "url": "{{BASE_URL}}/api/trips/GALR",
            "headers": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "tests": [
              {
                "descriptor": "Status code is 200",
                "script": "pm.test('Status code is 200', () => { pm.response.to.have.status(200); });"
              },
              {
                "descriptor": "Response is JSON",
                "script": "pm.test('Response is JSON', () => { pm.response.to.be.json; });"
              },
              {
                "descriptor": "Trip code matches GALR",
                "script": "pm.test('Trip code matches GALR', () => { const trip = pm.response.json(); pm.expect(trip.code).to.equal('GALR'); });"
              },
              {
                "descriptor": "Trip name is Gale Reef",
                "script": "pm.test('Trip name is Gale Reef', () => { const trip = pm.response.json(); pm.expect(trip.name).to.equal('Gale Reef'); });"
              },
              {
                "descriptor": "Trip has all required properties",
                "script": "pm.test('Trip has all required properties', () => { const trip = pm.response.json(); pm.expect(trip).to.have.property('code'); pm.expect(trip).to.have.property('name'); pm.expect(trip).to.have.property('resort'); pm.expect(trip).to.have.property('perPerson'); });"
              }
            ]
          },
          {
            "name": "Get Trip by Code - DAWR",
            "method": "GET",
            "url": "{{BASE_URL}}/api/trips/DAWR",
            "headers": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "tests": [
              {
                "descriptor": "Status code is 200",
                "script": "pm.test('Status code is 200', () => { pm.response.to.have.status(200); });"
              },
              {
                "descriptor": "Trip code matches DAWR",
                "script": "pm.test('Trip code matches DAWR', () => { const trip = pm.response.json(); pm.expect(trip.code).to.equal('DAWR'); });"
              },
              {
                "descriptor": "Trip name is Dawson's Reef",
                "script": "pm.test('Trip name is Dawsons Reef', () => { const trip = pm.response.json(); pm.expect(trip.name).to.equal('Dawson\\'s Reef'); });"
              }
            ]
          }
        ]
      },
      {
        "name": "Error Handling",
        "description": "Error scenario validation",
        "requests": [
          {
            "name": "Get Trip - Invalid Code",
            "method": "GET",
            "url": "{{BASE_URL}}/api/trips/INVALID",
            "headers": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "tests": [
              {
                "descriptor": "Status code is 404",
                "script": "pm.test('Status code is 404', () => { pm.response.to.have.status(404); });"
              },
              {
                "descriptor": "Response is JSON",
                "script": "pm.test('Response is JSON', () => { pm.response.to.be.json; });"
              },
              {
                "descriptor": "Response contains error message",
                "script": "pm.test('Response contains error message', () => { const json = pm.response.json(); pm.expect(json).to.have.property('message'); pm.expect(json.message).to.include('Trip not found with code: INVALID'); });"
              }
            ]
          },
          {
            "name": "Get Trip - Non-existent Code",
            "method": "GET",
            "url": "{{BASE_URL}}/api/trips/XXXX",
            "headers": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "tests": [
              {
                "descriptor": "Status code is 404",
                "script": "pm.test('Status code is 404', () => { pm.response.to.have.status(404); });"
              },
              {
                "descriptor": "Response contains error message",
                "script": "pm.test('Response contains error message', () => { const json = pm.response.json(); pm.expect(json).to.have.property('message'); });"
              }
            ]
          },
          {
            "name": "Unsupported HTTP Method - POST",
            "method": "POST",
            "url": "{{BASE_URL}}/api/trips",
            "headers": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "tests": [
              {
                "descriptor": "Status code indicates method not allowed",
                "script": "pm.test('Status code indicates method not allowed', () => { pm.expect(pm.response.code).to.be.oneOf([404, 405]); });"
              }
            ]
          }
        ]
      },
      {
        "name": "Performance Tests",
        "description": "Response time validation",
        "requests": [
          {
            "name": "Get All Trips - Performance",
            "method": "GET",
            "url": "{{BASE_URL}}/api/trips",
            "headers": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "tests": [
              {
                "descriptor": "Response time under 500ms",
                "script": "pm.test('Response time under 500ms', () => { pm.expect(pm.response.responseTime).to.be.below(500); });"
              },
              {
                "descriptor": "Status code is 200",
                "script": "pm.test('Status code is 200', () => { pm.response.to.have.status(200); });"
              }
            ]
          },
          {
            "name": "Get Single Trip - Performance",
            "method": "GET",
            "url": "{{BASE_URL}}/api/trips/GALR",
            "headers": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "tests": [
              {
                "descriptor": "Response time under 300ms",
                "script": "pm.test('Response time under 300ms', () => { pm.expect(pm.response.responseTime).to.be.below(300); });"
              },
              {
                "descriptor": "Status code is 200",
                "script": "pm.test('Status code is 200', () => { pm.response.to.have.status(200); });"
              }
            ]
          }
        ]
      },
      {
        "name": "Integration Tests",
        "description": "Full API workflow testing",
        "requests": [
          {
            "name": "Complete API Workflow",
            "method": "GET",
            "url": "{{BASE_URL}}/api/trips",
            "headers": [
              {
                "key": "Accept",
                "value": "application/json"
              }
            ],
            "tests": [
              {
                "descriptor": "API returns expected trip count",
                "script": "pm.test('API returns expected trip count', () => { const trips = pm.response.json(); pm.expect(trips.length).to.equal(3); });"
              },
              {
                "descriptor": "All expected trip codes present",
                "script": "pm.test('All expected trip codes present', () => { const trips = pm.response.json(); const codes = trips.map(trip => trip.code); pm.expect(codes).to.include('GALR'); pm.expect(codes).to.include('DAWR'); pm.expect(codes).to.include('CLAR'); });"
              },
              {
                "descriptor": "Content-Type header is correct",
                "script": "pm.test('Content-Type header is correct', () => { pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json'); });"
              }
            ]
          }
        ]
      }
    ],
    "variables": [
      {
        "key": "BASE_URL",
        "value": "http://localhost:3000"
      }
    ]
  }